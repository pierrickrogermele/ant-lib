#!/usr/bin/env python

import argparse

##################
# READ ARGUMENTS #
##################

def read_args():

	# Define arguments
	parser = argparse.ArgumentParser(description='Generates a build.xml file for a super project.')
	parser.add_argument('-n', '--name', type=str, required=True, metavar='name', help='Name of the super project.')
	parser.add_argument('-p', '--projects', type=str, nargs='*', metavar='project', help='list of subprojects.')

	# Get arguments
	args =  parser.parse_args()

	# Accept comma separated value lists for multiple value arguments
	if args.projects is not None and len(args.projects) == 1:
		args.projects = args.projects[0].split(',')

	return args

###################
# GENERATE TARGET #
###################

def generate_target(name, projects, subtarget=True):
	print ''
	print '\t<!-- {0} -->'.format(name.upper())
	if projects is None:
		print '\t<target name="{0}"/>'.format(name)
	else :
		print '\t<target name="{0}">'.format(name)
		for p in projects:
			if subtarget:
				print '\t\t<ant dir="{0}" target="{1}" inheritAll="false"/>'.format(p, name)
			else:
				print '\t\t<ant dir="{0}" inheritAll="false"/>'.format(p)
		print '\t</target>'

######################
# GENERATE BUILD XML #
######################

def generate_build_xml(name, projects):
	print '<project name="{0}" default="all">'.format(name)
	generate_target('all', projects, subtarget=False)
	generate_target('test', projects)
	generate_target('clean', projects)
	print ''
	print '</project>'

########
# MAIN #
########

args = read_args()
generate_build_xml(args.name, args.projects)
