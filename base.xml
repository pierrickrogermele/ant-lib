<!-- vi: se ft=ant: -->
<!-- DESCRIPTION
     This module is for being included by projects, in order to
     avoid them to define simple targets.
     All needed targets (compile, clean, ...) and properties for a simple project are provided by this module.
  -->

<!-- REQUIREMENTS
     The project that includes this module must define the following properties:
     <project_name>.src.dir
     <project_name>.jar.debug
     <project_name>.jar.release
  -->

<project name="fr.cea.ant.lib.base">
	
	<dirname property="fr.cea.ant.lib.base.dir" file="${ant.file.fr.cea.ant.lib.base}"/>

	<property name="build.dir" value="build"/>
	<property name="src.dir" value="src"/>
	<property name="src.gen.dir" value="src-gen"/>
	<property name="test.dir" value="test"/>

	<include file="utils.xml" as="utils"/>
	<include file="compile.xml" as="compile"/>

	<!-- SET PROPERTIES DYNAMICALLY -->
	<macrodef name="set_props">
		<attribute name="project"/>
		<sequential>
			<property name="project_name" value="@{project}"/>
			<script language="beanshell" setbeans="true">
				<classpath>
					<fileset dir="${fr.cea.ant.lib.base.dir}" includes="*.jar"/>
				</classpath> 

				<!-- PROJECT NAME -->
				String prj_name = project.getProperty("project_name");

				<!-- PROJECT DIR -->
				String prj_dir = new java.io.File(project.getProperty("ant.file." + prj_name)).getParent();
				project.setProperty(prj_name + ".dir", prj_dir);

				<!-- SRC -->
				String src_dir = project.getProperty("src.dir");
				project.setProperty(prj_name + ".src.dir", src_dir);
				project.addReference(prj_name + ".src",new org.apache.tools.ant.types.Path(project, prj_dir + java.io.File.separator + src_dir));
				project.setProperty(prj_name + ".src.dirs", src_dir);

				<!-- JAR BASENAME -->
				String jar_basename_key = prj_name + ".jar.basename";
				String jar_basename = project.getProperty(jar_basename_key);
				if (jar_basename == null) {
					jar_basename = prj_name;
					project.setProperty(jar_basename_key, prj_name);
				}

				<!-- JARS -->
				String[] mode = {"debug", "release"};
				for (int m = 0 ; m != mode.length ; ++m) {
					<!-- DEPS -->
					String jars_dep_key = prj_name + ".jars.dep." + mode[m];
					if ( ! project.hasReference(jars_dep_key))
						project.addReference(jars_dep_key, new org.apache.tools.ant.types.Path(project));

					String jar_path = prj_dir + java.io.File.separator + jar_basename + "." + mode[m] + ".jar";
					project.setProperty(prj_name + ".jar." + mode[m], jar_path);
					org.apache.tools.ant.types.Path jars_path = new org.apache.tools.ant.types.Path(project, jar_path);
					jars_path.add((org.apache.tools.ant.types.Path)project.getReference(jars_dep_key));
					String jars_ref_key = prj_name + ".jars." + mode[m];
					project.addReference(jars_ref_key, jars_path);
				}
			</script>
		</sequential>
	</macrodef>


	<!-- ADD A DIRECTORY OF GENERATED SOURCES -->
	<macrodef name="add_gen_src_dir">
		<attribute name="project"/>
		<attribute name="dir"/>
		<sequential>
			<property name="project_name" value="@{project}"/>
			<property name="gen_src_dir" value="@{dir}"/>
			<script language="beanshell" setbeans="true">
				<classpath>
					<fileset dir="${fr.cea.ant.lib.base.dir}" includes="*.jar"/>
				</classpath> 

				<!-- Get parameters -->
				String prj_name = project.getProperty("project_name");
				String gen_src_dir = project.getProperty("gen_src_dir");

				<!-- Add directory to source directories property -->
				project.setProperty(prj_name + ".src.dirs", project.getProperty(prj_name + ".src.dirs") + ";" + gen_src_dir);

				<!-- Add directory to source path reference -->
				java.io.File gen_src = new java.io.File(project.getProperty(prj_name + ".dir") + java.io.File.separator + gen_src_dir);
				org.apache.tools.ant.types.Path src_ref = (org.apache.tools.ant.types.Path)project.getReference(prj_name + ".src");
				src_ref.setLocation(gen_src);

				<!-- Update clean target -->
				org.apache.tools.ant.Target clean_target = (org.apache.tools.ant.Target)project.getTargets().get("clean");
				org.apache.tools.ant.taskdefs.Delete delete_task = (org.apache.tools.ant.taskdefs.Delete)project.createTask("delete");
				delete_task.setDir(gen_src);
				clean_target.addTask(delete_task);
			</script>
		</sequential>
	</macrodef>

	<!-- ADD A DEPENDENCY TARGET FOR COMPILE TARGET -->
	<macrodef name="add_compile_dependency">
		<attribute name="project"/>
		<attribute name="dependency"/>
		<sequential>
			<property name="project_name" value="@{project}"/>
			<property name="dependency" value="@{dependency}"/>
			<script language="beanshell" setbeans="true">
				<classpath>
					<fileset dir="${fr.cea.ant.lib.base.dir}" includes="*.jar"/>
				</classpath> 

				<!-- Get parameters -->
				String prj_name = project.getProperty("project_name");
				String dependency = project.getProperty("dependency");

				<!-- Update compile target -->
				org.apache.tools.ant.Target compile_target = (org.apache.tools.ant.Target)project.getTargets().get("compile");
				compile_target.addDependency(dependency);
			</script>
		</sequential>
	</macrodef>

	<!-- COMPILE -->
	<target name="compile">
		<mkdir dir="${build.dir}/${mode}"/>
		<javac srcdir="${${ant.project.name}.src.dirs}" destdir="${build.dir}/${mode}" includeantruntime="false"  debug="${javac.debug}" debuglevel="${javac.debug.level}" classpathref="${ant.project.name}.jars.dep.${mode}"/>
	</target>

	<!-- JAR PACKAGE -->
	<target name="jar" depends="utils.nested,compile">
		<jar basedir="${build.dir}/${mode}" destfile="${${ant.project.name}.jar.${mode}}"/>
	</target>

	<!-- DEBUG -->
	<target name="debug" depends="compile.debug,jar"/>

	<!-- RELEASE -->
	<target name="release" depends="compile.release,jar"/>

	<!-- ALL -->
	<target name="all">
		<antcall target="debug"/>
		<antcall target="release"/>
	</target>

	<!-- TEST --> 
	<target name="test" depends="all">
		<ant dir="test" inheritAll="false"/>
	</target>

	<!-- CLEAN -->
	<target name="clean">
		<ant dir="test" target="clean" inheritAll="false"/>
		<delete dir="${build.dir}"/>
		<delete>
			<fileset dir="."><include name="*.jar"/></fileset>
		</delete>
	</target>

</project>
