#!/usr/bin/env python

########
# ARGS #
########

import argparse

def read_args():
	parser = argparse.ArgumentParser()
	parser.add_argument('-p', help='Project name.', dest='project', type=str, required=True)
	parser.add_argument('-t', help='Output a build.xml for a test program.', action='store_true', dest='test', default=False)
	return parser.parse_args()

#############
# BUILD.XML #
#############

def print_buildxml(prj):
	ant_lib_dir = '../ant-lib'
	print('<project name="'+prj+'" default="all">')
	print('')
	print('	<dirname property="'+prj+'.dir" file="${ant.file.'+prj+'}"/>')
	print('')
	print('	<property name="build.dir" value="build"/>')
	print('	<property name="test.dir" value="test"/>')
	print('')
	print('	<include file="'+ant_lib_dir+'/utils.xml" as="utils"/>')
	print('	<include file="'+ant_lib_dir+'/compile.xml" as="compile"/>')
	print('')
	print('	<!-- SRC -->')
	print('	<property name="src.dir" value="src"/>')
	print('	<path id="'+prj+'.src">')
	print('		<pathelement location="${src.dir}"/>	')
	print('	</path>')
	print('	<property name="'+prj+'.src.dirs" refid="'+prj+'.src"/>')
	print('')
	print('	<!-- DEPS -->')
	print('	<include file="../java-lib/build.xml" as="java.lib"/>')
	print('	<path id="'+prj+'.jars.dep.debug">')
	print('		<path refid="fr.cea.lib.jars.debug"/>')
	print('	</path>')
	print('	<path id="'+prj+'.jars.dep.release">')
	print('		<path refid="fr.cea.lib.jars.release"/>')
	print('	</path>')
	print('')
	print('	<!-- JAR NAMES -->')
	print('	<property name="'+prj+'.jar.debug" value="${'+prj+'.dir}/'+prj+'.debug.jar"/>')
	print('	<property name="'+prj+'.jar.release" value="${'+prj+'.dir}/'+prj+'.release.jar"/>')
	print('')
	print('	<!-- EXPORT -->')
	print('	<path id="'+prj+'.jars.debug">')
	print('		<pathelement location="${'+prj+'.jar.debug}"/>')
	print('		<path refid="'+prj+'.jars.dep.debug"/>')
	print('	</path>')
	print('	<path id="'+prj+'.jars.release">')
	print('		<pathelement location="${'+prj+'.jar.release}"/>')
	print('		<path refid="'+prj+'.jars.dep.release"/>')
	print('	</path>')
	print('')
	print('	<!-- COMPILE -->')
	print('	<target name="compile">')
	print('		<mkdir dir="${build.dir}/${mode}"/>')
	print('		<javac srcdir="${${ant.project.name}.src.dirs}" destdir="${build.dir}/${mode}" includeantruntime="false"  debug="${javac.debug}" debuglevel="${javac.debug.level}" classpathref="${ant.project.name}.jars.dep.${mode}"/>')
	print('	</target>')
	print('')
	print('	<!-- JAR PACKAGE -->')
	print('	<target name="jar" depends="utils.nested,compile">')
	print('		<jar basedir="${build.dir}/${mode}" destfile="${${ant.project.name}.jar.${mode}}"/>')
	print('	</target>')
	print('')
	print('	<!-- DEBUG -->')
	print('	<target name="debug" depends="compile.debug,jar"/>')
	print('')
	print('	<!-- RELEASE -->')
	print('	<target name="release" depends="compile.release,jar"/>')
	print('')
	print('	<!-- ALL -->')
	print('	<target name="all">')
	print('		<antcall target="debug"/>')
	print('		<antcall target="release"/>')
	print('	</target>')
	print('')
	print('	<!-- TEST --> ')
	print('	<target name="test" depends="all">')
	print('		<ant dir="test" inheritAll="false"/>')
	print('	</target>')
	print('')
	print('	<!-- CLEAN -->')
	print('	<target name="clean">')
	print('		<ant dir="test" target="clean" inheritAll="false"/>')
	print('		<delete dir="${build.dir}"/>')
	print('		<delete>')
	print('			<fileset dir="."><include name="*.jar"/></fileset>')
	print('		</delete>')
	print('	</target>')
	print('')
	print('</project>')

##################
# TEST BUILD.XML #
##################

def print_test_buildxml(prj):
	ant_lib_dir = '../../ant-lib'
	print('<project name="'+prj+'.test" default="all">')
	print('')
	print('	<dirname property="'+prj+'.test.dir" file="${ant.file.'+prj+'.test}"/>')
	print('')
	print('	<property name="build.dir" value="build"/>')
	print('	<property name="src.dir" value="src"/>')
	print('')
	print('	<include file="../build.xml" as="lib"/>')
	print('	<include file="'+ant_lib_dir+'/utils.xml" as="utils"/>')
	print('	<include file="'+ant_lib_dir+'/compile.xml" as="compile"/>')
	print('	<include file="'+ant_lib_dir+'/test.xml" as="test"/>')
	print('')
	print('	<!-- DEPS -->')
	print('	<include file="../build.xml" as="lib"/>')
	print('	<path id="'+prj+'.test.jars.dep.debug">')
	print('		<path refid="'+prj+'.jars.debug"/>')
	print('		<pathelement location="${junit.jar}"/>')
	print('	</path>')
	print('	<path id="'+prj+'.test.jars.dep.release">')
	print('		<path refid="'+prj+'.jars.release"/>')
	print('		<pathelement location="${junit.jar}"/>')
	print('	</path>')
	print('')
	print('	<!-- COMPILE -->')
	print('	<target name="compile">')
	print('		<mkdir dir="${build.dir}/debug"/>')
	print('    	<javac srcdir="${src.dir}" destdir="${build.dir}/debug" includeantruntime="false" debug="true" debuglevel="${javac.debug.level.full}" classpathref="'+prj+'.test.jars.dep.debug"/>')
	print('	</target>')
	print('')
	print('	<!-- RUN -->')
	print('	<target name="run" depends="utils.nested,compile">')
	print('		<junit failureProperty="test.failure" dir="${'+prj+'.test.dir}" fork="true">')
	print('			<classpath>')
	print('				<path refid="'+prj+'.test.jars.dep.${mode}"/>')
	print('				<pathelement location="${build.dir}/debug"/>')
	print('			</classpath>')
	print('			<formatter type="brief" usefile="false"/>')
	print('			<batchtest>')
	print('				<fileset dir="${build.dir}/debug" includes="*.class"/>')
	print('			</batchtest>')
	print('		</junit>')
	print('		<fail message="test failed" if="test.failure"/>')
	print('	</target>')
	print('')
	print('	<target name="run.debug" depends="compile.debug,run"/>')
	print('	<target name="run.release" depends="compile.release,run"/>')
	print('')
	print('	<!-- ALL -->')
	print('	<target name="all">')
	print('		<antcall target="run.debug"/>')
	print('		<antcall target="run.release"/>')
	print('	</target>')
	print('')
	print('	<!-- CLEAN -->')
	print('	<target name="clean">')
	print('\t\t<delete dir="${build.dir}"/>')
	print('	</target>')
	print('')
	print('</project>')

########
# MAIN #
########

args = read_args()
if (args.test):
	print_test_buildxml(prj=args.project)
else:
	print_buildxml(prj=args.project)
